#!/bin/bash

#set -e
#set -x
set -u

# make sure cowbuilder/pbuilder/... are available
PATH='/bin:/sbin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin'

echo "*** Starting $0 at $(date) ***"
start_seconds=$(cut -d . -f 1 /proc/uptime)

JENKINS_DEBIAN_GLUE_VERSION=$(dpkg --list jenkins-debian-glue 2>/dev/null | awk '/^ii/ {print $3}')
if [ -n "${JENKINS_DEBIAN_GLUE_VERSION:-}" ] ; then
  echo "*** Running jenkins-debian-glue version $JENKINS_DEBIAN_GLUE_VERSION ***"
fi

checks_and_defaults() {
  if [ -r /etc/jenkins/debian_glue ] ; then
    . /etc/jenkins/debian_glue
  fi

  if [ -z "${JOB_NAME:-}" ] ; then
    echo "Error: No JOB_NAME defined, please run it in jenkins." >&2
    exit 1
  fi

  if [ -z "${build_architecture:-}" ] ; then
    echo "*** No build-architecture defined. Consider running it with matrix configuration. ***"
    build_architecture="$(dpkg-architecture -qDEB_HOST_ARCH)"
    echo "*** Falling back to default, using host architecture ${build_architecture}. ***"
  fi

  if [ -z "${DEBEMAIL:-}" ] ; then
    echo "Error: No email address for this buildd defined! Please check the configuration of this builder!"
    exit 1
  fi

  if [ -z "${OUTGOING_DIR:-}" ] ; then
    OUTGOING_DIR='/srv/buildd/outgoing'
  fi

  if [ -z "${PBUILDER_HOOKDIR:-}" ] ; then
    PBUILDER_HOOKDIR='/usr/share/jenkins-debian-glue/pbuilder-hookdir/'
  fi

  if [ -n "${KEY_ID:-}" ] ; then
    export GPGKEY=$KEY_ID
  fi
}

clean_workspace() {
  echo "*** The following files have been noticed in the workspace [$(pwd)]: ***"
  ls -la ./

#  echo "*** Cleaning workspace in $(pwd) to make sure we're building from scratch. ***"
#  rm -f ./* || true
}

# make sure we don't leave files for next run
bailout() {
  [ -n "${1:-}" ] && EXIT="${1}" || EXIT=0
  [ -n "${2:-}" ] && echo "$2" >&2

  echo "*** Getting rid of files in $WORKSPACE/binaries/ to avoid problems in next run. ***"
  rm -f "$WORKSPACE"/binaries/*
  ${SUDO_CMD:-} rm -rf /tmp/adt-$$ /tmp/apt-$$

  [ -n "$start_seconds" ] && SECONDS="$[$(cut -d . -f 1 /proc/uptime)-$start_seconds]" || SECONDS="unknown"
  echo "*** Finished execution of $0 at $(date) [running ${SECONDS} seconds] ***"

  exit $EXIT
}

identify_package_name() {
  # make sure we get rid of 'repos' and 'binaries' from Jenkins job name
  PACKAGE=${JOB_NAME%-repos*}
  PACKAGE=${PACKAGE%-binaries*}

  if [ -n "${PACKAGE:-}" ] ; then
    echo "*** Identified Debian package name $PACKAGE ***"
  else
    bailout 1 "Error: could not identify Debian package name based on job name ${JOB_NAME:-}."
  fi
}

set_base_path() {
  # when BASE_PATH is set in the build step then don't default to $WORKSPACE
  if [ -n "${BASE_PATH:-}" ] ; then
    echo "*** Using provided ${BASE_PATH} as BASE_PATH ***"
  else
    BASE_PATH="${WORKSPACE}"
    echo "*** Using \$WORKSPACE [$BASE_PATH] as default for BASE_PATH ***"
  fi

}

build_info() {
  if [ -z "${distribution:-}" ]; then
    echo "*** Distribution was not set! ***"
    exit 4
  fi
}

identify_sourcefile() {
  if [ -n "${sources:-}" ] ; then
    echo "*** WARNING: sources variable [$sources] is set, please use BASE_PATH variable instead ***"
    echo "*** If \$sources is unrelated to build-and-provide-package you can ignore this warning ***"
  fi

  echo "*** Identifying newest package version ***"
  newest_version="0~"

  for file in "${BASE_PATH}/"*.dsc ; do
    SOURCE_PACKAGE="$(awk '/^Source: / {print $2}' $file)"
    p="$(basename $file .dsc)"
    if [ "$p" = '*' ] ; then
      bailout 1 "Error: No source package found (forgot to configure source files deployment?)"
    fi
    cur_version="${p#*_}"
    if dpkg --compare-versions "${cur_version}" gt "${newest_version}" ; then
      newest_version="${cur_version}"
    else
      base_version="${cur_version}"
    fi
  done

  echo "*** Found package version $newest_version ***"

  sourcefile="${BASE_PATH}/${SOURCE_PACKAGE}"_*"${newest_version}".dsc

  echo "*** Using $sourcefile (version: ${newest_version})"
}

dist_and_arch_settings() {
  if [ -z "${build_architecture:-}" ] || [ "${build_architecture:-}" = "all" ] ; then
    arch="$(dpkg-architecture -qDEB_HOST_ARCH)"
    echo "*** No architecture set or architecture set to 'all', using system arch ${arch} ***"
  else
    arch="${build_architecture}"
    echo "*** architecture is set to ${build_architecture} ***"
  fi

  # only set $arch for other functions in this script if PROVIDE_ONLY is set
  if [ -n "${PROVIDE_ONLY:-}" ] ; then
    echo "*** Config variable 'PROVIDE_ONLY' is set, not setting COWBUILDER_BASE, COWBUILDER_DIST and DIST ***"
    return 0
  fi

  if [ -n "${distribution:-}" ] ; then
    local DIST="${distribution}"
  else
    # default to the currently running distribution to avoid hardcoding
    # a distribution which might not be supported by the running system
    local distribution=$(lsb_release --short --codename 2>/dev/null)
    [ -n "${distribution}" ] || distribution="sid"  # fallback to "sid" iff lsb_release fails
    local DIST="$distribution"
  fi

  # if COWBUILDER_DIST is set it overrides distribution then
  if [ -n "${COWBUILDER_DIST:-}" ]; then
    echo "*** COWBUILDER_DIST is set to $COWBUILDER_DIST - using it for base.cow if it does not exist yet. ***"
  else
    echo "*** Using cowbuilder base for distribution ${DIST} ***"
    COWBUILDER_DIST="${DIST}"
  fi

  if [ -n "${COWBUILDER_BASE:-}" ] ; then
    echo "*** COWBUILDER_BASE is set to $COWBUILDER_BASE - using as cowbuilder base.cow ***"
  else
    COWBUILDER_BASE="/var/cache/pbuilder/base-${COWBUILDER_DIST}-${arch}.cow"
    echo "*** No COWBUILDER_BASE set, using $COWBUILDER_BASE as cowbuilder base.cow ***"
  fi
}

cowbuilder_init() {
  if [ -n "${COMPONENTS:-}" ] ; then
    echo "*** COMPONENTS is set [$COMPONENTS], using for pbuilder configuration ***"
    local pbuilderrc=$(mktemp)
    echo "COMPONENTS=\"${COMPONENTS}\"" > $pbuilderrc
    local pbuildercfg="--configfile=$pbuilderrc"
  fi

  # workaround for Ubuntu problem, as cowdancer is available only in universe :(
  # https://bugs.launchpad.net/ubuntu/+source/cowdancer/+bug/237591
  # https://bugs.launchpad.net/ubuntu/+source/cowdancer/+bug/747053
  if lsb_release --id 2>/dev/null | grep -q Ubuntu ; then
    if [ -z "${COMPONENTS:-}" ] ; then
      echo "*** Ubuntu detected, enabling universe repository component to work around cowdancer issue ***"
      local pbuilderrc=$(mktemp)
      echo 'COMPONENTS="main universe"' > $pbuilderrc
      local pbuildercfg="--configfile=$pbuilderrc"
    fi
  fi

  if [ ! -d "${COWBUILDER_BASE}" ]; then
    echo "*** Creating cowbuilder base $COWBUILDER_BASE for arch $arch and distribution $COWBUILDER_DIST ***"
    sudo cowbuilder --create --basepath "${COWBUILDER_BASE}" --distribution "${COWBUILDER_DIST}" \
         --debootstrapopts --arch --debootstrapopts "$arch" \
         --debootstrapopts --variant=buildd ${pbuildercfg:-} \
         --hookdir "${PBUILDER_HOOKDIR}"
    [ $? -eq 0 ] || bailout 1 "Error: Failed to create cowbuilder base ${COWBUILDER_BASE}."
  else
    echo "*** Updating cowbuilder cow base ***"
    sudo cowbuilder --update --basepath "${COWBUILDER_BASE}"
    [ $? -eq 0 ] || bailout 1 "Error: Failed to update cowbuilder base ${COWBUILDER_BASE}."
  fi

  [ -n "${pbuilderrc:-}" ] && rm -f "$pbuilderrc"
}


identify_build_type() {
  # defaults
  DEBBUILDOPTS="-B" # -B -> build binary packages for current architecture only
  SKIP_ARCH_BUILD=false

  if [ "${build_architecture:-}" = "all" ] ; then
    echo "*** \$build_architecture is set to 'all', skipping further identify_build_type checks. ***"
    echo "*** ERROR: \$build_architecture has no valid value (all), consider setting it to amd64, i386,... instead. ***"
    exit 2
  fi

  if [ "${build_architecture:-}" = "amd64" ] ; then
    echo "*** Detected amd64 architecture/machine, building arch:all packages. ***"
    # -b -> build only binary packages (arch:any, arch:all)
    DEBBUILDOPTS="-b"
  fi

  if [ -z "${MAIN_ARCHITECTURE:-}" ] ; then
    if [ "$(dpkg-architecture -qDEB_HOST_ARCH)" = "${build_architecture:-}" ] ; then
      echo "*** MAIN_ARCHITECTURE is unset. ***"
      echo "*** Host architecture [$(dpkg-architecture -qDEB_HOST_ARCH)] matches \$architecture [${build_architecture:-}], using default ${DEBBUILDOPTS:-} buildoption ***"
      return 0
    else
      echo "*** MAIN_ARCHITECTURE is unset. ***"
      echo "*** Host architecture [$(dpkg-architecture -qDEB_HOST_ARCH)] does not match \$build_architecture [${build_architecture:-}] ... ***"
    fi
  else
    if [ "${MAIN_ARCHITECTURE:-}" = "${build_architecture:-}" ] ;then
      echo "*** MAIN_ARCHITECTURE is set [${MAIN_ARCHITECTURE:-}]. ***"
      echo "*** MAIN_ARCHITECTURE matches \$build_architecture [${build_architecture:-}], using default ${DEBBUILDOPTS:-} buildoption ***"
      return 0
    else
      echo "*** MAIN_ARCHITECTURE [${MAIN_ARCHITECTURE:-}] does not match \$build_architecture [${build_architecture:-}], continuing with identify_build_type ***"
    fi
  fi

  local TMPDIR=$(mktemp -d)
  local old_dir=$(pwd)
  cd "$TMPDIR"
  for file in  ${BASE_PATH}/${SOURCE_PACKAGE}_*.tar.* ; do
    if tar atf "$file" 2>/dev/null | grep -q debian/control ; then
      # might be source/debian/control - so let's identify the path to debian/control
      local control_file=$(tar atf "$file" 2>/dev/null | grep 'debian/control$')
      tar axf "$file" "$control_file" || bailout 1 "Error while looking at debian/control in source archive."

      if grep -q '^Architecture: all' "$control_file" ; then
        if grep -q '^Architecture: any' "$control_file" ; then
          echo "*** Package provides arch 'all' + 'any' (doing nothing at time). ***"
          break
        else
          # only "Architecture: all", so no arch specific packages since
          # we aren't building for $MAIN_ARCHITECTURE
          SKIP_ARCH_BUILD=true
          break
        fi
      fi
    fi
  done
  cd "$old_dir"

  rm -rf "${TMPDIR}"
}

autopkgtest_results() {
  if [ -n "${SKIP_AUTOPKGTEST_RESULTS:-}" ] ; then
    echo "** Skipping autopkgtest_results as requested via SKIP_AUTOPKGTEST_RESULTS ***"
    return 0
  fi

  # copy autopkgtest results from /tmp
  rm -rf adt
  ${SUDO_CMD:-} chmod -R go+rX /tmp/adt-$$
  cp -a /tmp/adt-$$ adt
}

cowbuilder_run() {
  echo "*** cowbuilder build phase for arch $build_architecture ***"
  mkdir -p "$WORKSPACE"/binaries/ /tmp/adt-$$ /tmp/apt-$$

  local BINDMOUNTS="/tmp/adt-$$ /tmp/apt-$$"

  # make sure we build arch specific packages only when necessary
  identify_build_type

  if $SKIP_ARCH_BUILD ; then
    autopkgtest_results
    bailout 0 "Nothing to do, architecture all binary packages only for non-primary architecture."
  fi

# TODO: We want to add the remote buildd Tanglu repository here!
  # For release builds use release repo to satisfy dependencies
#  if [ -n "${release:-}" ] && [ "$release" != "none" ] && [ "$release" != "trunk" ] && \
#    [ "${release}" != '${release}' ] ; then
#    if [ -n "${RELEASE_REPOSITORY:-}" ]; then
#      local REPOSITORY="${RELEASE_REPOSITORY}"
#    else
#      local REPOSITORY="${REPOSITORY}/release/${release}"
#    fi;
#
#    if [ -d "$REPOSITORY" ]; then
#      BINDMOUNTS="$BINDMOUNTS $REPOSITORY"
#      cat > /tmp/apt-$$/release.list <<EOF
#deb file://${REPOSITORY} ${release} main
#deb-src file://${REPOSITORY} ${release} main
#EOF
#    fi
#  fi

  case "$build_architecture" in
    i386)
      linux32 sudo cowbuilder --buildresult "$WORKSPACE"/binaries/ \
        --build $sourcefile \
        --basepath "${COWBUILDER_BASE}" --debbuildopts "${DEBBUILDOPTS:-}" \
        --hookdir "${PBUILDER_HOOKDIR}" --bindmounts "$BINDMOUNTS" \
        --debbuildopts "-m'${DEBEMAIL}'"
      [ $? -eq 0 ] || bailout 1 "Error: Failed to build with cowbuilder."
      ;;
    amd64|all|*)
      sudo cowbuilder --buildresult "$WORKSPACE"/binaries/ \
        --build $sourcefile \
        --basepath "${COWBUILDER_BASE}" --debbuildopts "${DEBBUILDOPTS:-}" \
        --hookdir "${PBUILDER_HOOKDIR}" --bindmounts "$BINDMOUNTS" \
        --debbuildopts "-m'${DEBEMAIL}'"
      [ $? -eq 0 ] || bailout 1 "Error: Failed to build with cowbuilder."
      ;;
    *)
      bailout 1 "Error: Unsupported architecture: $build_architecture"
      ;;
  esac
}

# sign the resulting packages
sign_result() {
  if [ -n "${KEY_ID:-}" ] ; then
    key_cmd="-k $KEY_ID"
  fi
  debsign "${WORKSPACE}/binaries/"*.changes $key_cmd --no-re-sign
}

# make them available for the Jenkin's 'Archiving artifacts'
binaries_to_workspace() {
  echo "*** Moving binaries files to workspace. ***"
  mv "${WORKSPACE}/binaries/"* "${WORKSPACE}/"
  rmdir "${WORKSPACE}/binaries/"
}

# copy results to dput directory
request_build_upload() {
  count=`ls -1 *.changes 2>/dev/null | wc -l`
  if [ $count == 0 ]
  then
    echo "*** There are no files to upload! ***"
  fi

  for changesfile in "${WORKSPACE}/"*.changes
  do
    request-package-upload tanglu-ftpmaster $changesfile
  done
}

# main execution
trap bailout SIGHUP SIGINT SIGQUIT SIGABRT SIGKILL SIGALRM SIGTERM

checks_and_defaults
clean_workspace
identify_package_name
set_base_path
build_info
identify_sourcefile
dist_and_arch_settings

cowbuilder_init
cowbuilder_run

sign_result

binaries_to_workspace
request_build_upload

autopkgtest_results

bailout 0

# vim:foldmethod=marker ts=2 ft=sh ai expandtab sw=2
