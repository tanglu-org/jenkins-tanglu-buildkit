== Setting up a Tanglu buildd ==

=== 1. Install dependencies ===
On your newly installed Debian Wheezy machine, install the buildd dependencies:

 apt-get install sudo default-jre cowbuilder devscripts dpkg-dev eatmydata python-dbus

Then install the Tanglu Archive Keyring and the Tanglu debootstrap:
wget:
http://archive.tanglu.org/tanglu/pool/main/d/debootstrap/debootstrap_1.0.48tanglu2.1_all.deb
http://archive.tanglu.org/tanglu/pool/main/t/tanglu-archive-keyring/tanglu-archive-keyring_2013.02_all.deb
(install local packages using dpkg)

=== 2. Create base environment ===
Create a base cowbuilder environment using one of the following commands:
 :: i386 builder on amd64 host:
   cowbuilder --create --basepath /var/cache/pbuilder/base-aequorea-i386.cow --distribution aequorea --debootstrapopts --arch --debootstrapopts i386 --mirror http://archive.tanglu.org/tanglu --debootstrapopts "--keyring=/usr/share/keyrings/tanglu-archive-keyring.gpg"

 :: amd64 builder on amd64 host:
   cowbuilder --create --basepath /var/cache/pbuilder/base-aequorea-amd64.cow --distribution aequorea --mirror http://archive.tanglu.org/tanglu --debootstrapopts "--keyring=/usr/share/keyrings/tanglu-archive-keyring.gpg"

 :: i386 builder on i386 host:
   cowbuilder --create --basepath /var/cache/pbuilder/base-aequorea-i386.cow --distribution aequorea --mirror http://archive.tanglu.org/tanglu --debootstrapopts "--keyring=/usr/share/keyrings/tanglu-archive-keyring.gpg"

=== 3. Set up buildd user ===
Create new buildd user:
 adduser --home=/srv/buildd buildd
Give it sudo permission by creating /etc/sudoers.d/buildd with content:
 buildd ALL=NOPASSWD: /usr/sbin/cowbuilder, /usr/sbin/chroot

NOTE: The user name and HOME path are currently hardcoded in some scripts, so please don't change them.

=== 4. Generate builder key ===
Login as buildd (su buildd)
Use gpg --gen-key to create a new key. Select RSA(4) and a length of 4096 bit.
You got the name of an element as buildd name.
The name for the key is: "<arch> <element> Buildd", e.g. "amd64 Helium Buildd"
Set an email address in form of <arch>-<name>@buildd.tanglu.org, e.g. i386-beryllium@buildd.tanglu.org for the key.
Set expiration date to 1-3 years

The rsa-tools and urandom may help if you don't have enough entropy.

=== 6. Install buildd software ===
Clone the Tanglu build kit:
 git clone git://gitorious.org/tanglu/jenkins-tanglu-buildkit.git buildkit-git
(ideally in /srv/buildd)
Execute "make install_slave" in the source directory. This will install the required software to build Tanglu packages.
Please keep the Git clone up-to-date and install new software versions from time to time.

=== 7. Configure buildd software ===
Move /etc/jenkins/debian_glue.example to /etc/jenkins/debian_glue and change the settings to your needs.
You will have to set DEBEMAIL to the mail address you used for the GPG key before.
Also, set KEY_ID to the ID of your GPG-key.

Create the log directory:
mkdir /srv/buildd/logs

=== 8. Configure dput ===
Login as buildd, create ~/.dput.cf with the following content:

[tanglu-ftpmaster]
fqdn = ftp-master.tanglu.org
method = ftp
incoming = ~/incoming/
login = anonymous

=== 9. Create cronjob ===
As buildd user, create a new crontab (crontab -e) with the following contents:

# Edit this file to introduce tasks to be run by cron.
#
# m h  dom mon dow   command
0 0-23/1 * * * /usr/bin/tanglu-upload-runner

=== 10. Add ssh key ===
As user buildd, edit ~/.ssh/authorized_keys and add the following content:
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC/vbEIRu4YOgQfMYZ9anR+t5WlEsqDeYmI0+sAsdYcnec0WfWppSDdHwBrO4KCMEmV5BnvzS4/yVQM9Ib56kmGYl5Kb4Qc0fBHKZDY6n5oozXdFdFPKTjwXFfku1QZjr6FU7gTPywiciTNQzB/5IRqr6BXdsTRGiodJe8Gp7Trq4bKJSANdybvaZ4quWOojd3e0kZ7Xa8cVJh2vHuLtMD1rMl37qDrwTo9pUtXkJxNpd/shJrcO+NfhB2BVEDNGf4gD4OWBQNLFsGoZfeqtOzr54AQeM2abWyx0R4lFCkCCQGaQfLytHc1pjuI7ZPeubDCDz2+1Rs2QliFNbR4Cywn buildmaster@buildd.tanglu.org

(one line)
This will make the buildd accessible by the build-master.

=== 11. Register the buildd ===
Tell the build-master admin (currently Matthias Klumpp <mak@debian.org>) about the new buildd and give him access to the machine.
The build-master admin will check the generic settings and perform a testbuild, then add the machine to the buildd pool and register it's key
with the archive kit.
The build-aster will copy a lot of files around during build, and will constantly monitor the buildd.

=== EXTRA: Set up eatmydata ===
For faster builds, configure eatmydata:
 cowbuilder --login --save --save-after-login --basepath /var/cache/pbuilder/base-aequorea-amd64.cow
 apt-get install eatmydata
Eatmydata should have already been installed on the host machine.
Now add this to your /etc/pbuilderrc :

if [ -z "$LD_PRELOAD" ]; then
  LD_PRELOAD=/usr/lib/libeatmydata/libeatmydata.so
else
  LD_PRELOAD="$LD_PRELOAD":/usr/lib/libeatmydata/libeatmydata.so
fi

export LD_PRELOAD

And you're done! Check if builds work before disabling maintenance mode on the buildmaster!
