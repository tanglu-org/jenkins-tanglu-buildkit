<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>{{info}}
This job was automatically generated by the Archive Kit! Do not edit it manually!</description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>12</daysToKeep>
    <numToKeep>1</numToKeep>
    <artifactDaysToKeep>8</artifactDaysToKeep>
    <artifactNumToKeep>1</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>arch-{{architecture}}</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>true</blockBuildWhenUpstreamBuilding>

  <triggers class="vector">
    <org.jenkinsci.plugins.scripttrigger.groovy.GroovyScriptTrigger plugin="scripttrigger@0.28">
      <spec>@hourly
</spec>
      <triggerLabel>ftpmaster</triggerLabel>
      <labelRestriction>true</labelRestriction>
      <enableConcurrentBuild>false</enableConcurrentBuild>
      <groovyExpression>// check if we should build this package
def command = &quot;&quot;&quot;package-buildcheck -c {{distroname}} {{component}} {{pkgname}} {{architecture}}&quot;&quot;&quot;;
def proc = command.execute();
proc.waitFor();

// check current job version
jobVersion = &quot;0&quot;;
project.getBuildWrappersList().each() {
  cl -&gt; if (cl.getClass().equals(org.jenkinsci.plugins.buildnamesetter.BuildNameSetter))
    jobVersion = cl.template.replace(&apos;#${BUILD_NUMBER}&apos;, &quot;&quot;);
}
lastVersionBuilt = &quot;Unknown&quot;;
build = project.getLastBuild()
if (build != null) {
    lastVersionBuilt = build.getDisplayName();
    lastVersionBuilt = desc.substring(0, desc.indexOf(&apos;#&apos;));
}

// we only need to run a build-check if we haven&apos;t already built the current version
if (jobVersion == lastVersionBuilt)
    return false;

// prepare change of the project notes (in description)
desc = project.getDescription();
sep_idx = desc.indexOf(&apos;&lt;br/&gt;----&apos;);
if (sep_idx &gt; 0)
    desc = desc.substring(0, sep_idx)

// check for the different return codes
build_project = false;
code = proc.exitValue();
if (code == 0) {
    println(&quot;Rebuild!&quot;);
    desc = desc + &apos;&lt;br/&gt;----&lt;br/&gt;&lt;br/&gt;No notes about this build exist.&apos;
    build_project = true;
} else if (code == 8) {
    // we are waiting for depedencies
    desc = desc + &apos;&lt;br/&gt;----&lt;br/&gt;&apos; + proc.in.text.replaceAll(&apos;\n&apos;, &apos;&lt;br/&gt;&apos;);
    build_project = false;
} else {
    desc = desc + &apos;&lt;br/&gt;----&lt;br/&gt;&lt;br&gt;No notes about this build exist.&apos;
}

project.setDescription(desc)

return build_project
</groovyExpression>
      <groovySystemScript>true</groovySystemScript>
    </org.jenkinsci.plugins.scripttrigger.groovy.GroovyScriptTrigger>
  </triggers>

  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>export distribution={{distroname}}
tanglu-fetch-source --component={{component}} --pkg={{pkgname}} --version={{pkgversion}}
build-and-push-package
</command>
    </hudson.tasks.Shell>
  </builders>

  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>*.dsc,*.changes,*.upload</artifacts>
      <latestOnly>true</latestOnly>
      <allowEmptyArchive>false</allowEmptyArchive>
    </hudson.tasks.ArtifactArchiver>

    <hudson.plugins.warnings.WarningsPublisher plugin="warnings@4.25">
      <healthy></healthy>
      <unHealthy></unHealthy>
      <thresholdLimit>low</thresholdLimit>
      <pluginName>[WARNINGS] </pluginName>
      <defaultEncoding></defaultEncoding>
      <canRunOnFailed>false</canRunOnFailed>
      <useStableBuildAsReference>false</useStableBuildAsReference>
      <useDeltaValues>false</useDeltaValues>
      <thresholds plugin="analysis-core@1.49">
        <unstableTotalAll></unstableTotalAll>
        <unstableTotalHigh></unstableTotalHigh>
        <unstableTotalNormal></unstableTotalNormal>
        <unstableTotalLow></unstableTotalLow>
        <failedTotalAll></failedTotalAll>
        <failedTotalHigh></failedTotalHigh>
        <failedTotalNormal></failedTotalNormal>
        <failedTotalLow></failedTotalLow>
      </thresholds>
      <shouldDetectModules>false</shouldDetectModules>
      <dontComputeNew>true</dontComputeNew>
      <doNotResolveRelativePaths>true</doNotResolveRelativePaths>
      <parserConfigurations/>
      <consoleParsers>
        <hudson.plugins.warnings.ConsoleParser>
          <parserName>GNU Make + GNU Compiler (gcc)</parserName>
        </hudson.plugins.warnings.ConsoleParser>
      </consoleParsers>
    </hudson.plugins.warnings.WarningsPublisher>

    <com.chikli.hudson.plugin.naginator.NaginatorPublisher plugin="naginator@1.8">
      <regexpForRerun>.*(E: Some index files failed to download).*</regexpForRerun>
      <rerunIfUnstable>true</rerunIfUnstable>
      <checkRegexp>true</checkRegexp>
      <delay class="com.chikli.hudson.plugin.naginator.ProgressiveDelay">
        <increment>5</increment>
        <max>30</max>
      </delay>
      <maxSchedule>4</maxSchedule>
    </com.chikli.hudson.plugin.naginator.NaginatorPublisher>
  </publishers>

  <buildWrappers>
    <hudson.plugins.ansicolor.AnsiColorBuildWrapper plugin="ansicolor@0.3.1">
      <colorMapName>xterm</colorMapName>
    </hudson.plugins.ansicolor.AnsiColorBuildWrapper>

    <org.jenkinsci.plugins.buildnamesetter.BuildNameSetter plugin="build-name-setter@1.3">
      <template>{{pkgversion}}#${BUILD_NUMBER}</template>
    </org.jenkinsci.plugins.buildnamesetter.BuildNameSetter>
  </buildWrappers>
</project>
